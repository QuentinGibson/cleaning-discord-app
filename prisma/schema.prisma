// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {

  provider = "postgresql"

  url = env("POSTGRES_PRISMA_URL") // uses connection pooling

  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Task {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  description String?       @db.Text
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  soldiers    TaskSoldier[] @relation("TaskToTaskSoldiers")

  // Relation with TaskSoldiers is defined as `TaskToTaskSoldiers`
}

model Soldier {
  id          Int           @id @default(autoincrement())
  userId      String        @db.VarChar(255) @unique
  username    String        @db.VarChar(255)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  tasks       TaskSoldier[] @relation("SoldierToTaskSoldiers")

  // Relation with TaskSoldiers is defined as `SoldierToTaskSoldiers`
}

model TaskSoldier {
  taskId      Int
  soldierId   Int
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade, name: "TaskToTaskSoldiers")
  soldier     Soldier   @relation(fields: [soldierId], references: [id], onDelete: Cascade, name: "SoldierToTaskSoldiers")

  @@id([taskId, soldierId])
}
